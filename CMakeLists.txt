cmake_minimum_required(VERSION 2.8.12.2)
project (Blister C CXX)

find_package(Threads QUIET)
find_program(PROGRAM_CCACHE NAMES ccache PATHS ENV PATH)
find_program(PROGRAM_CPPCHECK NAMES cppcheck PATHS ENV PATH)

if(CMAKE_BUILD_TYPE STREQUAL "")
    set(CMAKE_BUILD_TYPE Debug)
endif()
set(CMAKE_C_STANDARD 11)
set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED TRUE)
set(CMAKE_MACOSX_RPATH 1)
set(CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/build")
if(POLICY CMP0063)
    cmake_policy(SET CMP0063 NEW)
    set(CMAKE_VISIBILITY_INLINES_HIDDEN 1)
    set(CMAKE_C_VISIBILITY_PRESET hidden)
    set(CMAKE_CXX_VISIBILITY_PRESET hidden)
endif()

if(NOT CMAKE_VERSION VERSION_LESS 3.9)
    cmake_policy(SET CMP0069 NEW)
    include(CheckIPOSupported)
    check_ipo_supported(RESULT ipo)
    if(ipo AND NOT CMAKE_BUILD_TYPE STREQUAL Debug)
	set(CMAKE_INTERPROCEDURAL_OPTIMIZATION TRUE)
	if(CMAKE_CXX_COMPILER_ID MATCHES "Clang")
	    set(LTO_LDFLAGS "-Wl,-cache_path_lto,${PROJECT_BINARY_DIR}/.lto")
	endif()
    endif()
endif()

# compile optimizers
if(NOT APPLE)
    include(cotire OPTIONAL)
endif()
if(COMMAND cotire)
    if(WIN32)
	add_definitions(-DNOIME -DNOMCX -DNOSERVICE -DWIN32_LEAN_AND_MEAN)
    endif()
    set(COTIRE_MAXIMUM_NUMBER_OF_UNITY_INCLUDES -j)
    set(COTIRE_MINIMUM_NUMBER_OF_TARGET_SOURCES 4)
    if(TARGET clean_cotire)
	set(CLEAN_COTIRE clean_cotire)
    endif()
    set_property(DIRECTORY PROPERTY COTIRE_ADD_UNITY_BUILD FALSE)
else()
    function(cotire)
    endfunction()
endif()
if(PROGRAM_CCACHE)
    if(NOT CMAKE_VERSION VERSION_LESS 3.5)
	set(CMAKE_C_COMPILER_LAUNCHER "${PROGRAM_CCACHE}")
	set(CMAKE_CXX_COMPILER_LAUNCHER "${PROGRAM_CCACHE}")
    else()
	set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE "${PROGRAM_CCACHE}")
    endif()
endif()

# CXX CMAKE_BUILD_TYPE flags are not always set
if(NOT CMAKE_CXX_FLAGS_DEBUG AND NOT CMAKE_CXX_FLAGS_RELEASE)
    set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG}")
    set(CMAKE_CXX_FLAGS_MINSIZEREL "${CMAKE_C_FLAGS_MINSIZEREL}")
    set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE}")
    set(CMAKE_CXX_FLAGS_RELWITHDEBINFO "${CMAKE_C_FLAGS_RELWITHDEBINFO}")
endif()

if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES "Clang")
    if(NOT SANITIZE_FLAGS)
	set(SANITIZE_FLAGS "-D_FORTIFY_SOURCE=2")
    endif()
    set(COMMON_C_FLAGS "${SANITIZE_FLAGS} -ffast-math -march=native -pipe -Wall -Wconversion -Wno-deprecated -Werror -Wextra -Wformat=2 -Wno-format-nonliteral -Wformat-security -Wno-format-y2k -Wmultichar -Wredundant-decls -Wsign-conversion -Wstrict-aliasing -Wstrict-overflow=2 -Wtrampolines -Wno-unknown-pragmas -Wwrite-strings")
    set(COMMON_CXX_FLAGS "-fno-exceptions -fno-rtti -Wnon-virtual-dtor -Woverloaded-virtual -Wsign-promo")
    if(CMAKE_COMPILER_IS_GNUCXX)
	if(NOT CMAKE_CXX_COMPILER_VERSION VERSION_GREATER 4.6)
	    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -std=gnu99")
	    set(COMMON_C_FLAGS "${COMMON_C_FLAGS} -D__USE_XOPEN2K8")
	    set(COMMON_CXX_FLAGS "${COMMON_CXX_FLAGS} -std=c++0x")
	endif()
	if(NOT CMAKE_CXX_COMPILER_VERSION VERSION_LESS 5.0)
	    set(COMMON_C_FLAGS "${COMMON_C_FLAGS} -fstack-protector-strong -Wdouble-promotion -Wformat-overflow=2 -Wformat-signedness -Wformat-truncation=2 -Wlogical-op -Wodr -Wshadow -Wstack-usage=10000")
	endif()
	if(NOT CMAKE_CXX_COMPILER_VERSION VERSION_LESS 6.0)
	    set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -fno-plt")
	    set(COMMON_C_FLAGS "${COMMON_C_FLAGS} -Wduplicated-branches -Wduplicated-cond -Wnull-dereference -Wstringop-overflow=3")
	endif()
	if(NOT CMAKE_CXX_COMPILER_VERSION VERSION_LESS 7.0)
	    set(COMMON_C_FLAGS "${COMMON_C_FLAGS} -fcf-protection=full -fstack-clash-protection")
	endif()
	if(NOT CMAKE_CXX_COMPILER_VERSION VERSION_LESS 8.0)
	    set(COMMON_CXX_FLAGS "${COMMON_CXX_FLAGS} -Wextra-semi")
	endif()
	set(COMMON_C_FLAGS_RELWITHDEBINFO "-femit-struct-debug-reduced -ggdb1")
	set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${LTO_LDFLAGS} ${SANITIZE_FLAGS} -Wl,--as-needed -Wl,-gc-sections -Wl,-z,relro")
	set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -Wl,--no-undefined")
    else()
	set(COMMON_C_FLAGS "${COMMON_C_FLAGS} -fno-standalone-debug -fvisibility=hidden -Wdouble-promotion -Wnull-dereference -Wodr -Wshadow -Wno-unknown-warning-option")
	set(COMMON_C_FLAGS_RELWITHDEBINFO "-gline-tables-only")
	set(COMMON_CXX_FLAGS "${COMMON_CXX_FLAGS} -Wno-c++11-extensions -Wextra-semi")
	set(CMAKE_EXE_LINKER_FLAGS "${LTO_LDFLAGS} ${SANITIZE_FLAGS} -fno-plt")
	set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -fno-plt")
    endif()
    set(COMMON_C_FLAGS_DEBUG "-O1 -fno-omit-frame-pointer -fno-optimize-sibling-calls -ggdb -D_DEBUG")
    set(COMMON_C_FLAGS_MINSIZEREL "-Os")
    set(COMMON_C_FLAGS_RELEASE "-O3 -fdata-sections -ffunction-sections")
elseif(MSVC)
    set(COMMON_C_FLAGS "/GF /W4 /WX /arch:AVX /favor:INTEL64 /fp:fast")
    set(COMMON_C_FLAGS_DEBUG "/sdl")
    set(COMMON_C_FLAGS_MINSIZEREL "/Os /Oi")
    set(COMMON_C_FLAGS_RELEASE "/Gl /Gw /Gy")
    set(COMMON_CXX_FLAGS "/EHsc- /GR- /std:c++14")
endif()

set(COMMON_C_FLAGS_MINSIZEREL "${COMMON_C_FLAGS_RELEASE} ${COMMON_C_FLAGS_MINSIZEREL}")
set(COMMON_C_FLAGS_RELWITHDEBINFO "${COMMON_C_FLAGS_RELEASE} ${COMMON_C_FLAGS_RELWITHDEBINFO}")
set(COMMON_CXX_FLAGS "${COMMON_C_FLAGS} ${COMMON_CXX_FLAGS}")
set(COMMON_CXX_FLAGS_DEBUG "${COMMON_C_FLAGS_DEBUG}")
set(COMMON_CXX_FLAGS_MINSIZEREL "${COMMON_C_FLAGS_MINSIZEREL}")
set(COMMON_CXX_FLAGS_RELEASE "${COMMON_C_FLAGS_RELEASE}")
set(COMMON_CXX_FLAGS_RELWITHDEBINFO "${COMMON_C_FLAGS_RELWITHDEBINFO}")

set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${COMMON_C_FLAGS}")
set(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} ${COMMON_C_FLAGS_DEBUG}")
set(CMAKE_C_FLAGS_MINSIZEREL "${CMAKE_C_FLAGS_MINSIZEREL} ${COMMON_C_FLAGS_MINSIZEREL}")
set(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} ${COMMON_C_FLAGS_RELEASE}")
set(CMAKE_C_FLAGS_RELWITHDEBINFO "${CMAKE_C_FLAGS_RELWITHDEBINFO} ${COMMON_C_FLAGS_RELWITHDEBINFO}")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${COMMON_CXX_FLAGS}")
set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} ${COMMON_CXX_FLAGS_DEBUG}")
set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} ${COMMON_CXX_FLAGS_RELEASE}")
set(CMAKE_CXX_FLAGS_RELWITHDEBINFO "${CMAKE_CXX_FLAGS_RELWITHDEBINFO} ${COMMON_CXX_FLAGS_RELWITHDEBINFO}")

set(PROFILE_FLAGS "-pg -O0 -U_FORTIFY_SOURCE")
set(CMAKE_C_FLAGS_PROFILE "${CMAKE_C_FLAGS_DEBUG} ${PROFILE_FLAGS}")
set(CMAKE_CXX_FLAGS_PROFILE "${CMAKE_CXX_FLAGS_DEBUG} ${PROFILE_FLAGS}")
set(CMAKE_EXE_LINKER_FLAGS_PROFILE "${CMAKE_EXE_LINKER_FLAGS_DEBUG} ${PROFILE_FLAGS}")
set(CMAKE_SHARED_LINKER_FLAGS_PROFILE "${CMAKE_SHARED_LINKER_FLAGS_DEBUG} ${PROFILE_FLAGS}")
mark_as_advanced(CMAKE_C_FLAGS_PROFILE CMAKE_CXX_FLAGS_PROFILE CMAKE_EXE_LINKER_FLAGS_PROFILE CMAKE_SHARED_LINKER_FLAGS_PROFILE)

if(WIN32)
    set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/bin)
    # set only one of BLISTER_DLL or BLISTER_LIB
    set(BLISTER_DLL 1)
    if(BLISTER_DLL)
	add_definitions("-DBLISTER_DLL")
    endif()
else()
    set(BLISTER_DLL 1)
    set(BLISTER_LIB 1)
endif()

# cppcheck support
list(APPEND cppcheck_args --enable=warning,style,performance,portability,missingInclude --force --inline-suppr -j 4 -q --template="{file}:{line} {severity}={id} {message}")
list(APPEND cppcheck_suppressions class_X_Y ConfigurationNotChecked cstyleCast missingOverride noExplicitConstructor postfixOperator preprocessorErrorDirective uninitMemberVar unmatchedSuppression unreadVariable variableScope)
foreach(suppression ${cppcheck_suppressions})
    list(APPEND cppcheck_args --suppress=${suppression})
endforeach()

function(target_cppcheck target)
    if(NOT TARGET ${target})
	message(FATAL_ERROR "cppcheck target does not exist: ${target}")
    elseif(PROGRAM_CPPCHECK)
	get_target_property(includes ${target} INCLUDE_DIRECTORIES)
	set(cppcheck_includes)
	foreach(include ${includes})
	    if(include)
		list(APPEND cppcheck_includes "-I${include}")
	    endif()
	endforeach()
	get_target_property(sources ${target} SOURCES)
	set(cppcheck_files)
	foreach(source ${sources})
	    get_source_file_property(cppcheck_lang ${source} LANGUAGE)
	    get_source_file_property(cppcheck_loc ${source} LOCATION)
	    if(cppcheck_lang AND (cppcheck_lang STREQUAL C OR cppcheck_lang STREQUAL CXX))
		list(APPEND cppcheck_files ${cppcheck_loc})
	    endif()
	endforeach()
	add_custom_target(${target}_cppcheck
	    COMMAND ${PROGRAM_CPPCHECK} ${cppcheck_args} ${cppcheck_includes} ${cppcheck_files}
	    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
	    COMMENT "Running cppcheck on ${target}" VERBATIM)
	add_dependencies(cppcheck ${target}_cppcheck)
    endif()
endfunction()

function(cppcheck)
    foreach(target ${ARGN})
	target_cppcheck(${target})
    endforeach()
endfunction()

if(PROGRAM_CPPCHECK)
    add_custom_target(cppcheck COMMENT "C/C++ static code analysis")
else()
    add_custom_target(cppcheck COMMENT "cppcheck not available")
endif()
set_target_properties(cppcheck PROPERTIES EXCLUDE_FROM_ALL TRUE)

# distclean equivalent
add_custom_target(distclean)
add_custom_command(
    COMMENT "Cleaning distribution"
    COMMAND $(MAKE) ${CLEAN_COTIRE} clean
    COMMAND find . -name .lto -o -name CMakeFiles -o -name CMakeCache.txt -o -name cmake_install.cmake -o -name \\*_cotire.cmake -o -name \\*.ninja -o -name Makefile | xargs rm -rf
    TARGET distclean)

add_subdirectory(lib)
add_subdirectory(test)
