cmake_minimum_required(VERSION 2.8.12.2)
if(POLICY CMP0056)
    cmake_policy(SET CMP0056 NEW)
endif()
if(POLICY CMP0060)
    cmake_policy(SET CMP0060 NEW)
endif()
if(POLICY CMP0065)
    cmake_policy(SET CMP0065 NEW)
endif()
if(POLICY CMP0066)
    cmake_policy(SET CMP0066 NEW)
endif()
if(POLICY CMP0102)
    cmake_policy(SET CMP0102 NEW)
endif()

project (Blister C CXX)

include(FindThreads)
include(GNUInstallDirs)
find_library(SYSTEM_RT_LIB NAMES rt)
find_package(Threads QUIET)
find_program(PROGRAM_CCACHE NAMES ccache PATHS ENV PATH)
find_program(PROGRAM_CLANGTIDY NAMES clang-tidy PATHS ENV PATH)
find_program(PROGRAM_CPPCHECK NAMES cppcheck PATHS ENV PATH)
find_program(PROGRAM_CPPLINT NAMES cpplint cpplint.py PATHS ENV PATH)

if(CMAKE_BUILD_TYPE STREQUAL "")
    set(CMAKE_BUILD_TYPE Debug)
endif()
set(CMAKE_C_STANDARD 11)
set(CMAKE_CXX_EXTENSIONS TRUE)
set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED TRUE)
set(CMAKE_MACOSX_RPATH TRUE)
set(CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/build")
set(CMAKE_OPTIMIZE_DEPENDENCIES TRUE)
set(CMAKE_PCH_WARN_INVALID FALSE)
set(CMAKE_PCH_INSTANTIATE_TEMPLATES TRUE)
set(CMAKE_SKIP_RULE_DEPENDENCY TRUE)
set(CMAKE_THREAD_PREFER_PTHREAD TRUE)

if(CMAKE_CXX_COMPILER_ID MATCHES Clang)
    set(CMAKE_COMPILER_IS_CLANG TRUE CACHE BOOL "Clang compiler")
endif()

if(POLICY CMP0063)
    cmake_policy(SET CMP0063 NEW)
    set(CMAKE_VISIBILITY_INLINES_HIDDEN TRUE)
    set(CMAKE_C_VISIBILITY_PRESET hidden)
    set(CMAKE_CXX_VISIBILITY_PRESET hidden)
endif()

if(NOT CMAKE_VERSION VERSION_LESS 3.9 AND NOT CMAKE_BUILD_TYPE STREQUAL Debug)
    cmake_policy(SET CMP0069 NEW)
    include(CheckIPOSupported)
    check_ipo_supported(RESULT ipo)
    if(ipo)
	set(CMAKE_INTERPROCEDURAL_OPTIMIZATION TRUE)
	if(CMAKE_COMPILER_IS_GNUCXX)
	    list(APPEND CMAKE_C_COMPILE_OPTIONS_IPO "-flto=4")
	    list(APPEND CMAKE_CXX_COMPILE_OPTIONS_IPO "-flto=4")
	elseif(CMAKE_COMPILER_IS_CLANG)
	    set(IPO_LDFLAGS "-Wl,-cache_path_lto,${PROJECT_BINARY_DIR}/.lto")
	endif()
    endif()
endif()
if(NOT DEFINED IPO_LDFLAGS)
    set(IPO_LDFLAGS "")
endif()

# compile optimizers
if(NOT APPLE)
    include(cotire OPTIONAL)
endif()
if(COMMAND cotire)
    if(WIN32)
	add_definitions(-DNOIME -DNOMCX -DNOSERVICE -DWIN32_LEAN_AND_MEAN)
    endif()
    set(COTIRE_MAXIMUM_NUMBER_OF_UNITY_INCLUDES -j)
    set(COTIRE_MINIMUM_NUMBER_OF_TARGET_SOURCES 4)
    if(TARGET clean_cotire)
	set(CLEAN_COTIRE clean_cotire)
    endif()
    set_property(DIRECTORY PROPERTY COTIRE_ADD_UNITY_BUILD FALSE)
else()
    function(cotire)
    endfunction()
    set(CLEAN_COTIRE "")

endif()
if(PROGRAM_CCACHE AND NOT CMAKE_C_CLANG_TIDY AND NOT CMAKE_CXX_CLANG_TIDY AND NOT CMAKE_C_CPPCHECK AND NOT CMAKE_CXX_CPPCHECK AND NOT CMAKE_C_CPPLINT AND NOT CMAKE_CXX_CPPLINT AND NOT CMAKE_C_INCLUDE_WHAT_YOU_USE AND NOT CMAKE_CXX_INCLUDE_WHAT_YOU_USE)
    if(NOT CMAKE_VERSION VERSION_LESS 3.5)
        set(CMAKE_C_COMPILER_LAUNCHER CCACHE_DEPEND=1 CCACHE_HARDLINK=1 CCACHE_SLOPPINESS=file_stat_matches,include_file_ctime,include_file_mtime,locale,pch_defines,system_headers,time_macros ${PROGRAM_CCACHE})
	set(CMAKE_CXX_COMPILER_LAUNCHER ${CMAKE_C_COMPILER_LAUNCHER})
    else()
	set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE "${PROGRAM_CCACHE}")
    endif()
endif()

# CXX CMAKE_BUILD_TYPE flags are not always set
if(NOT CMAKE_CXX_FLAGS_DEBUG AND NOT CMAKE_CXX_FLAGS_RELEASE)
    set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG}")
    set(CMAKE_CXX_FLAGS_MINSIZEREL "${CMAKE_C_FLAGS_MINSIZEREL}")
    set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE}")
    set(CMAKE_CXX_FLAGS_RELWITHDEBINFO "${CMAKE_C_FLAGS_RELWITHDEBINFO}")
endif()

if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_COMPILER_IS_CLANG)
    if(NOT SANITIZE_FLAGS)
	set(SANITIZE_FLAGS "-D_FORTIFY_SOURCE=2")
    endif()
    set(COMMON_C_FLAGS "${SANITIZE_FLAGS} -ffast-math -march=native -pipe -Wall -Wconversion -Werror -Wextra -Wformat=2 -Wno-format-nonliteral -Wformat-security -Wno-format-y2k -Wmultichar -Wno-pragmas -Wredundant-decls -Wsign-conversion -Wstrict-aliasing -Wstrict-overflow=2 -Wno-unknown-pragmas -Wwrite-strings")
    set(COMMON_CXX_FLAGS "-fno-exceptions -fno-rtti -Wno-deprecated -Wnon-virtual-dtor -Woverloaded-virtual -Wsign-promo")
    if(CMAKE_COMPILER_IS_GNUCXX)
	if(NOT CMAKE_CXX_COMPILER_VERSION VERSION_GREATER 4.6)
	    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -std=gnu99")
	    set(COMMON_C_FLAGS "${COMMON_C_FLAGS} -D__USE_XOPEN2K8")
	    set(COMMON_CXX_FLAGS "${COMMON_CXX_FLAGS} -std=c++0x")
	endif()
	if(NOT CMAKE_CXX_COMPILER_VERSION VERSION_LESS 5.0)
	    set(COMMON_C_FLAGS "${COMMON_C_FLAGS} -fmax-errors=8 -fstack-protector-strong -Wdouble-promotion -Wformat-overflow=2 -Wformat-signedness -Wformat-truncation=2 -Wlogical-op -Wodr -Wshadow -Wstack-usage=10000 -Wtrampolines")
	    set(LDFLAGS_C_STATIC "-static-libgcc")
	    set(LDFLAGS_CXX_STATIC "${LDFLAGS_C_STATIC} -static-libstdc++")
	endif()
	if(NOT CMAKE_CXX_COMPILER_VERSION VERSION_LESS 6.0)
	    set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -fno-plt")
	    set(COMMON_C_FLAGS "${COMMON_C_FLAGS} -Wduplicated-branches -Wduplicated-cond -Wnull-dereference -Wstringop-overflow=3")
	endif()
	if(NOT CMAKE_CXX_COMPILER_VERSION VERSION_LESS 7.0)
	    set(COMMON_C_FLAGS "${COMMON_C_FLAGS} -fcf-protection=full -fstack-clash-protection")
	endif()
	if(NOT CMAKE_CXX_COMPILER_VERSION VERSION_LESS 8.0)
	    set(COMMON_CXX_FLAGS "${COMMON_CXX_FLAGS} -Wextra-semi")
	endif()
	set(COMMON_C_FLAGS_RELWITHDEBINFO "-femit-struct-debug-reduced -ggdb1")
	set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${IPO_LDFLAGS} ${SANITIZE_FLAGS} -Wl,--as-needed -Wl,-gc-sections -Wl,-z,relro")
	set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -Wl,--no-undefined")
    else()
	set(COMMON_C_FLAGS "${COMMON_C_FLAGS} -fno-standalone-debug -fvisibility=hidden -Wdouble-promotion -Wnull-dereference -Wno-null-pointer-subtraction -Wodr -Wshadow -Wno-unknown-warning-option")
	set(COMMON_C_FLAGS_RELWITHDEBINFO "-gline-tables-only")
	set(COMMON_CXX_FLAGS "${COMMON_CXX_FLAGS} -Wno-c++11-extensions -Wextra-semi")
	set(CMAKE_EXE_LINKER_FLAGS "${IPO_LDFLAGS} ${SANITIZE_FLAGS} -fno-plt")
	set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS}")
    endif()
    set(COMMON_C_FLAGS_DEBUG "-O1 -fno-omit-frame-pointer -fno-optimize-sibling-calls -ggdb -D_DEBUG")
    set(COMMON_C_FLAGS_MINSIZEREL "-Os")
    set(COMMON_C_FLAGS_RELEASE "-O3 -fdata-sections -ffunction-sections")
elseif(MSVC)
    set(COMMON_C_FLAGS "/GF /W4 /WX /arch:AVX /favor:INTEL64 /fp:fast")
    set(COMMON_C_FLAGS_DEBUG "/sdl")
    set(COMMON_C_FLAGS_MINSIZEREL "/Os /Oi")
    set(COMMON_C_FLAGS_RELEASE "/Gl /Gw /Gy")
    set(COMMON_CXX_FLAGS "/EHsc- /GR- /std:c++14")
endif()

set(COMMON_C_FLAGS_MINSIZEREL "${COMMON_C_FLAGS_RELEASE} ${COMMON_C_FLAGS_MINSIZEREL}")
set(COMMON_C_FLAGS_RELWITHDEBINFO "${COMMON_C_FLAGS_RELEASE} ${COMMON_C_FLAGS_RELWITHDEBINFO}")
set(COMMON_CXX_FLAGS "${COMMON_C_FLAGS} ${COMMON_CXX_FLAGS}")
set(COMMON_CXX_FLAGS_DEBUG "${COMMON_C_FLAGS_DEBUG}")
set(COMMON_CXX_FLAGS_MINSIZEREL "${COMMON_C_FLAGS_MINSIZEREL}")
set(COMMON_CXX_FLAGS_RELEASE "${COMMON_C_FLAGS_RELEASE}")
set(COMMON_CXX_FLAGS_RELWITHDEBINFO "${COMMON_C_FLAGS_RELWITHDEBINFO}")

set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${COMMON_C_FLAGS}")
set(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} ${COMMON_C_FLAGS_DEBUG}")
set(CMAKE_C_FLAGS_MINSIZEREL "${CMAKE_C_FLAGS_MINSIZEREL} ${COMMON_C_FLAGS_MINSIZEREL}")
set(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} ${COMMON_C_FLAGS_RELEASE}")
set(CMAKE_C_FLAGS_RELWITHDEBINFO "${CMAKE_C_FLAGS_RELWITHDEBINFO} ${COMMON_C_FLAGS_RELWITHDEBINFO}")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${COMMON_CXX_FLAGS}")
set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} ${COMMON_CXX_FLAGS_DEBUG}")
set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} ${COMMON_CXX_FLAGS_RELEASE}")
set(CMAKE_CXX_FLAGS_RELWITHDEBINFO "${CMAKE_CXX_FLAGS_RELWITHDEBINFO} ${COMMON_CXX_FLAGS_RELWITHDEBINFO}")

set(PROFILE_FLAGS "-pg -O0 -U_FORTIFY_SOURCE")
set(CMAKE_C_FLAGS_PROFILE "${CMAKE_C_FLAGS_DEBUG} ${PROFILE_FLAGS}")
set(CMAKE_CXX_FLAGS_PROFILE "${CMAKE_CXX_FLAGS_DEBUG} ${PROFILE_FLAGS}")
set(CMAKE_EXE_LINKER_FLAGS_PROFILE "${CMAKE_EXE_LINKER_FLAGS_DEBUG} ${PROFILE_FLAGS}")
set(CMAKE_SHARED_LINKER_FLAGS_PROFILE "${CMAKE_SHARED_LINKER_FLAGS_DEBUG} ${PROFILE_FLAGS}")
mark_as_advanced(CMAKE_C_FLAGS_PROFILE CMAKE_CXX_FLAGS_PROFILE CMAKE_EXE_LINKER_FLAGS_PROFILE CMAKE_SHARED_LINKER_FLAGS_PROFILE)

if(WIN32)
    set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/bin)
    # set only one of BLISTER_DLL or BLISTER_LIB
    set(BLISTER_DLL TRUE)
    if(BLISTER_DLL)
	add_definitions("-DBLISTER_DLL")
    endif()
else()
    set(BLISTER_DLL TRUE)
    set(BLISTER_LIB TRUE)
endif()

# clang-tidy support
if(PROGRAM_CLANGTIDY)
    add_custom_target(clangtidy COMMENT "Clang-tidy C/C++ static analysis")
    execute_process(COMMAND bash -c "dirname $(dirname $(dirname $(clang -print-resource-dir)))" OUTPUT_VARIABLE CLANG_DIR OUTPUT_STRIP_TRAILING_WHITESPACE)
    file(GLOB CLANG_CXX_INC ${CLANG_DIR}/include/c++/*)
    list(APPEND clangtidy_args --extra-arg=-isystem --extra-arg=${CLANG_CXX_INC} --quiet)
    if(APPLE)
        list(APPEND clangtidy_args --extra-arg=-isystem --extra-arg=/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include --extra-arg=-isystem --extra-arg=/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/System/Library/Frameworks/Kernel.framework/Versions/A/Headers)
    endif()
else()
    add_custom_target(clangtidy COMMENT "clang-tidy not available")
endif()
set_target_properties(clangtidy PROPERTIES EXCLUDE_FROM_ALL TRUE)

function(target_clangtidy target)
    if(PROGRAM_CLANGTIDY)
        if(NOT TARGET ${target})
            message(FATAL_ERROR "clangtidy target does not exist: ${target}")
        endif()
        set(files)
        get_target_property(sources ${target} SOURCES)
        foreach(source ${sources})
	    get_source_file_property(location ${source} LOCATION)
	    list(APPEND files ${location})
        endforeach()
        foreach(file ${ARGN})
            if(EXISTS ${file})
                list(APPEND files ${file})
            elseif(EXISTS ${CMAKE_CURRENT_LIST_DIR}/${file})
                list(APPEND files ${CMAKE_CURRENT_LIST_DIR}/${file})
            else()
                message(FATAL_ERROR "clang-tidy file does not exist: ${file}")
            endif()
        endforeach()
        add_custom_target(clangtidy_${target}
            COMMENT "Running clang-tidy on ${target}"
	    COMMAND ${PROGRAM_CLANGTIDY} ${clangtidy_args} $<TARGET_PROPERTY:${target},CLANGTIDY_ARGS> ${files} -- "$<$<BOOL:$<TARGET_PROPERTY:${target},COMPILE_DEFINITIONS>>:-D$<JOIN:$<TARGET_PROPERTY:${target},COMPILE_DEFINITIONS>,;-D>>" "$<$<BOOL:$<TARGET_PROPERTY:${target},INCLUDE_DIRECTORIES>>:-I$<JOIN:$<TARGET_PROPERTY:${target},INCLUDE_DIRECTORIES>,;-I>>" $<TARGET_PROPERTY:${target},CLANGTIDY_FLAGS>
	    COMMAND_EXPAND_LISTS
            VERBATIM WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})
        add_dependencies(clangtidy clangtidy_${target})
    endif()
endfunction()

function(clangtidy)
    foreach(target ${ARGN})
        target_clangtidy(${target})
    endforeach()
endfunction()

# cppcheck support
if(PROGRAM_CPPCHECK)
    add_custom_target(cppcheck COMMENT "Cppcheck C/C++ static code analysis")
    list(APPEND cppcheck_args
        --enable=warning,style,performance,portability,missingInclude
        --force --inline-suppr -j 4 -q
        --suppressions-list=${CMAKE_SOURCE_DIR}/.cppcheck-suppressions
        --template="{file}:{line} {severity}={id} {message}")
else()
    add_custom_target(cppcheck COMMENT "cppcheck not available")
endif()

set_target_properties(cppcheck PROPERTIES EXCLUDE_FROM_ALL TRUE)

function(target_cppcheck target)
    if(PROGRAM_CPPCHECK)
	if(NOT TARGET ${target})
	    message(FATAL_ERROR "cppcheck target does not exist: ${target}")
	endif()
	set(files)
	get_target_property(includes ${target} INCLUDE_DIRECTORIES)
	set(includes)
	foreach(include ${includes})
	    if(include)
		list(APPEND includes "-I${include}")
	    endif()
	endforeach()
	get_target_property(sources ${target} SOURCES)
	foreach(source ${sources})
	    get_source_file_property(lang ${source} LANGUAGE)
	    if(lang AND (lang STREQUAL C OR lang STREQUAL CXX))
		get_source_file_property(location ${source} LOCATION)
		list(APPEND files ${location})
	    endif()
	endforeach()
	add_custom_target(${target}_cppcheck
	    COMMENT "Running cppcheck on ${target}"
	    COMMAND ${PROGRAM_CPPCHECK} ${cppcheck_args} ${includes} ${files}
	    VERBATIM WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})
	add_dependencies(cppcheck ${target}_cppcheck)
    endif()
endfunction()

function(cppcheck)
    foreach(target ${ARGN})
	target_cppcheck(${target})
    endforeach()
endfunction()

# cpplint support
if(PROGRAM_CPPLINT)
    add_custom_target(cpplint COMMENT "Cppcheck C/C++ style analysis")
    list(APPEND cpplint_args "--quiet")
else()
    add_custom_target(cpplint COMMENT "cpplint not available")
endif()
set_target_properties(cpplint PROPERTIES EXCLUDE_FROM_ALL TRUE)

function(target_cpplint target)
    if(PROGRAM_CPPLINT)
	if(NOT TARGET ${target})
	    message(FATAL_ERROR "cpplint target does not exist: ${target}")
	endif()
	set(files)
	if(DEFINED ${target}_INC_SOURCE)
	    list(APPEND files ${${target}_INC_SOURCE})
	endif()
	get_target_property(sources ${target} SOURCES)
	foreach(source ${sources})
	    get_source_file_property(lang ${source} LANGUAGE)
	    if(lang AND (lang STREQUAL C OR lang STREQUAL CXX))
		get_source_file_property(location ${source} LOCATION)
		list(APPEND files ${location})
		get_filename_component(location ${location} NAME_WE)
		set(location ${CMAKE_CURRENT_LIST_DIR}/${location}.h)
		if(EXISTS ${location})
		    list(APPEND files ${location})
		endif()
	    endif()
	endforeach()
	foreach(file ${ARGN})
	    if(EXISTS ${file})
		list(APPEND files ${file})
	    elseif(EXISTS ${CMAKE_CURRENT_LIST_DIR}/${file})
		list(APPEND files ${CMAKE_CURRENT_LIST_DIR}/${file})
	    else()
		message(FATAL_ERROR "cpplint file does not exist: ${file}")
	    endif()
	endforeach()
	add_custom_target(${target}_cpplint
	    COMMENT "Running cpplint on ${target}"
	    COMMAND ${PROGRAM_CPPLINT} ${cpplint_args} ${files}
	    VERBATIM WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})
	add_dependencies(cpplint ${target}_cpplint)
    endif()
endfunction()

function(cpplint)
    foreach(target ${ARGN})
	target_cpplint(${target})
    endforeach()
endfunction()

function(analyze)
    clangtidy(${ARGN})
    cppcheck(${ARGN})
    cpplint(${ARGN})
endfunction()

add_custom_target(analyze)
add_dependencies(analyze cppcheck cpplint)
set_target_properties(analyze PROPERTIES EXCLUDE_FROM_ALL TRUE)

# distclean equivalent
add_custom_target(distclean)
add_custom_command(
    COMMENT "Cleaning distribution"
    COMMAND $(MAKE) ${CLEAN_COTIRE} clean
    COMMAND find . -name .lto -o -name CMakeFiles -o -name CMakeCache.txt -o -name cmake_install.cmake -o -name \\*_cotire.cmake -o -name \\*.ninja -o -name Makefile | xargs rm -rf
    TARGET distclean)

add_subdirectory(lib)
add_subdirectory(test)
